/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectocomunicacion.menuprincipal;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Timestamp;
import java.sql.Statement;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingConstants;
import static proyectocomunicacion.Ingreso.Login.PASSWORD;
import static proyectocomunicacion.Ingreso.Login.USSERNAME;
import static proyectocomunicacion.Ingreso.Login.URL;


public class Chat extends javax.swing.JFrame {
    
    private String destinatarioId;
    private String emisorId;
    private String destinatarioNombreCompleto;
    private Timer timer;
    
    public Chat(String emisorId, String destinatarioId, String destinatarioNombreCompleto, String lenguajeDestinatario) {
        this.destinatarioId = destinatarioId;
        this.destinatarioNombreCompleto = destinatarioNombreCompleto;
        this.emisorId = emisorId;
        
        Timer timer = new Timer();
        TimerTask tarea = new TimerTask() {
            @Override
            public void run() {
                // Lógica para comprobar si se ha insertado una fila en la base de datos
                if (haInsertadoFila(emisorId, destinatarioId)) {
                   System.out.println("Se ha insertado una fila en la base de datos.");
                   cargarMensajes(); // Actualiza los mensajes si se ha insertado una fila
                } else {
               }
           }
        };

        // Programa la tarea para que se ejecute cada 5 segundos (5000 milisegundos)
        timer.schedule(tarea, 0, 5000);
        
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setTitle(destinatarioNombreCompleto);
        initComponents();
        cargarMensajes();
        JScrollBar verticalScrollBar = jScrollPane2.getVerticalScrollBar();
        verticalScrollBar.setValue(verticalScrollBar.getMaximum());

    }

    private Chat() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);
        jPanel1.setBounds(0, 0, 800, 600);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(17, 435, 760, 101);

        jButton1.setText("ENVIAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(700, 554, 77, 25);

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 13)); // NOI18N
        jLabel1.setText(destinatarioNombreCompleto);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(17, 16, 300, 18);

        jButton2.setText("CERRAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(17, 554, 78, 25);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setHorizontalScrollBar(null);

        jPanel2.setBounds(17, 40, 360, 389);
        jPanel2.setPreferredSize(new java.awt.Dimension(758, 0));
        jPanel2.setLayout(null);
        jScrollPane2.setViewportView(jPanel2);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(17, 40, 760, 389);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jPanel2.setPreferredSize(new Dimension(758, 0));
        insertarFilaEnBD(this.emisorId, destinatarioId, jTextArea1.getText());
        jTextArea1.setText("");
        cargarMensajes();
        JScrollBar verticalScrollBar = jScrollPane2.getVerticalScrollBar();
        verticalScrollBar.setValue(verticalScrollBar.getMaximum());
    }//GEN-LAST:event_jButton1ActionPerformed

private boolean haInsertadoFila(String remitenteId, String destinatarioId) {
    try {
        Connection connection = DriverManager.getConnection(URL, USSERNAME, PASSWORD);
        
        // Utiliza un PreparedStatement para evitar problemas de SQL injection
        String consulta = "SELECT * FROM mensajes WHERE (remitenteId = ? AND destinatarioId = ?) AND timestamp >= ?";
        try (PreparedStatement statement = connection.prepareStatement(consulta)) {
            statement.setString(1, destinatarioId);
            statement.setString(2, remitenteId);
            
            // Calcula la marca de tiempo hace 5 segundos
            Timestamp timestampHace5Segundos = new Timestamp(System.currentTimeMillis() - 5000);
            statement.setTimestamp(3, timestampHace5Segundos);
            
            try (ResultSet resultSet = statement.executeQuery()) {
                // Si hay al menos una fila, se ha insertado una fila en los últimos 5 segundos
                return resultSet.next();
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return false;
}

    
    private static List<Mensaje> obtenerMensajes(String remitente, String destinatario) {
        List<Mensaje> mensajes = new ArrayList<>();

        try (Connection connection = DriverManager.getConnection(URL, USSERNAME, PASSWORD)) {
            String selectQuery = "SELECT * FROM mensajes WHERE (remitenteId = ? AND destinatarioId = ?) OR (remitenteId = ? AND destinatarioId = ?)";
            try (PreparedStatement statement = connection.prepareStatement(selectQuery)) {
                statement.setString(1, remitente);
                statement.setString(2, destinatario);
                statement.setString(3, destinatario);
                statement.setString(4, remitente);

                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        int id = resultSet.getInt("idmensajes");
                        String remitenteDB = resultSet.getString("remitenteId");
                        String destinatarioDB = resultSet.getString("destinatarioId");
                        String contenido = resultSet.getString("contenido");
                        Timestamp timestamp = resultSet.getTimestamp("timestamp");

                        Mensaje mensaje = new Mensaje(id, remitenteDB, destinatarioDB, contenido, timestamp);
                        mensajes.add(mensaje);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return mensajes;
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        detenerTemporizador();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private static void insertarFilaEnBD(String remitenteId, String destinatarioId, String contenido) {
        try (Connection connection = DriverManager.getConnection(URL, USSERNAME, PASSWORD)) {
            String sql = "INSERT INTO mensajes (remitenteId, destinatarioId, contenido, timestamp) VALUES (?, ?, ?, ?)";
            
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setInt(1, Integer.parseInt(remitenteId));
                statement.setInt(2, Integer.parseInt(destinatarioId));
                statement.setString(3, contenido);
                statement.setTimestamp(4, Timestamp.from(Instant.now()));
                
                statement.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al añadir fila a la base de datos.");
        }
    }
    
    private void detenerTemporizador() {
        if (timer != null) {
            timer.cancel();
        }
    }

    
    public void cargarMensajes() {
        if (jPanel2 != null) {
            jPanel2.setPreferredSize(new Dimension(758, 0));
            jPanel2.removeAll();
            List<Mensaje> mensajes = obtenerMensajes(this.emisorId, String.valueOf(destinatarioId));

            // Ordenar los mensajes por timestamp
            Collections.sort(mensajes);

            // Mostrar los mensajes
            int posYInicial = 0;
            for (Mensaje mensaje : mensajes) {
                if (mensaje.destinatario.equals(destinatarioId)) {
                    jPanel2.add(new MensajeLabel(mensaje.contenido, posYInicial, SwingConstants.LEFT, mensaje.timestamp));
                } else {
                    jPanel2.add(new MensajeLabel(mensaje.contenido, posYInicial, SwingConstants.RIGHT, mensaje.timestamp));
                }
                posYInicial = posYInicial + 90;
                jPanel2.setPreferredSize(new Dimension(758, jPanel2.getPreferredSize().height + 90));
            }

            jPanel2.repaint();
            jPanel2.revalidate();

            JScrollBar verticalScrollBar = jScrollPane2.getVerticalScrollBar();
            verticalScrollBar.setValue(verticalScrollBar.getMaximum());
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
